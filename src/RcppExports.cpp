// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// entropy_
double entropy_(Rcpp::NumericVector& p);
RcppExport SEXP _spartropy_entropy_(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(entropy_(p));
    return rcpp_result_gen;
END_RCPP
}
// entropy2_
double entropy2_(Rcpp::NumericVector& p);
RcppExport SEXP _spartropy_entropy2_(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(entropy2_(p));
    return rcpp_result_gen;
END_RCPP
}
// entropy10_
double entropy10_(Rcpp::NumericVector& p);
RcppExport SEXP _spartropy_entropy10_(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(entropy10_(p));
    return rcpp_result_gen;
END_RCPP
}
// mutual_information_
double mutual_information_(Rcpp::NumericMatrix& ps);
RcppExport SEXP _spartropy_mutual_information_(SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(mutual_information_(ps));
    return rcpp_result_gen;
END_RCPP
}
// mutual_information2_
double mutual_information2_(Rcpp::NumericMatrix& ps);
RcppExport SEXP _spartropy_mutual_information2_(SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(mutual_information2_(ps));
    return rcpp_result_gen;
END_RCPP
}
// mutual_information10_
double mutual_information10_(Rcpp::NumericMatrix& ps);
RcppExport SEXP _spartropy_mutual_information10_(SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(mutual_information10_(ps));
    return rcpp_result_gen;
END_RCPP
}
// frequencies_
Rcpp::IntegerVector frequencies_(Rcpp::IntegerMatrix& x);
RcppExport SEXP _spartropy_frequencies_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(frequencies_(x));
    return rcpp_result_gen;
END_RCPP
}
// normalise_
Rcpp::NumericVector normalise_(Rcpp::IntegerVector& x);
RcppExport SEXP _spartropy_normalise_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(normalise_(x));
    return rcpp_result_gen;
END_RCPP
}
// frequencies_2d_
Rcpp::IntegerMatrix frequencies_2d_(Rcpp::IntegerMatrix& x, Rcpp::IntegerVector& is, Rcpp::IntegerVector& js);
RcppExport SEXP _spartropy_frequencies_2d_(SEXP xSEXP, SEXP isSEXP, SEXP jsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type is(isSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type js(jsSEXP);
    rcpp_result_gen = Rcpp::wrap(frequencies_2d_(x, is, js));
    return rcpp_result_gen;
END_RCPP
}
// normalise_2d_
Rcpp::NumericMatrix normalise_2d_(Rcpp::IntegerMatrix& x);
RcppExport SEXP _spartropy_normalise_2d_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(normalise_2d_(x));
    return rcpp_result_gen;
END_RCPP
}
// mutual_information_implicit_
double mutual_information_implicit_(Rcpp::IntegerMatrix& x, Rcpp::IntegerVector& is, Rcpp::IntegerVector& js);
RcppExport SEXP _spartropy_mutual_information_implicit_(SEXP xSEXP, SEXP isSEXP, SEXP jsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type is(isSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type js(jsSEXP);
    rcpp_result_gen = Rcpp::wrap(mutual_information_implicit_(x, is, js));
    return rcpp_result_gen;
END_RCPP
}
// mutual_information2_implicit_
double mutual_information2_implicit_(Rcpp::IntegerMatrix& x, Rcpp::IntegerVector& is, Rcpp::IntegerVector& js);
RcppExport SEXP _spartropy_mutual_information2_implicit_(SEXP xSEXP, SEXP isSEXP, SEXP jsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type is(isSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type js(jsSEXP);
    rcpp_result_gen = Rcpp::wrap(mutual_information2_implicit_(x, is, js));
    return rcpp_result_gen;
END_RCPP
}
// mutual_information10_implicit_
double mutual_information10_implicit_(Rcpp::IntegerMatrix& x, Rcpp::IntegerVector& is, Rcpp::IntegerVector& js);
RcppExport SEXP _spartropy_mutual_information10_implicit_(SEXP xSEXP, SEXP isSEXP, SEXP jsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type is(isSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type js(jsSEXP);
    rcpp_result_gen = Rcpp::wrap(mutual_information10_implicit_(x, is, js));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spartropy_entropy_", (DL_FUNC) &_spartropy_entropy_, 1},
    {"_spartropy_entropy2_", (DL_FUNC) &_spartropy_entropy2_, 1},
    {"_spartropy_entropy10_", (DL_FUNC) &_spartropy_entropy10_, 1},
    {"_spartropy_mutual_information_", (DL_FUNC) &_spartropy_mutual_information_, 1},
    {"_spartropy_mutual_information2_", (DL_FUNC) &_spartropy_mutual_information2_, 1},
    {"_spartropy_mutual_information10_", (DL_FUNC) &_spartropy_mutual_information10_, 1},
    {"_spartropy_frequencies_", (DL_FUNC) &_spartropy_frequencies_, 1},
    {"_spartropy_normalise_", (DL_FUNC) &_spartropy_normalise_, 1},
    {"_spartropy_frequencies_2d_", (DL_FUNC) &_spartropy_frequencies_2d_, 3},
    {"_spartropy_normalise_2d_", (DL_FUNC) &_spartropy_normalise_2d_, 1},
    {"_spartropy_mutual_information_implicit_", (DL_FUNC) &_spartropy_mutual_information_implicit_, 3},
    {"_spartropy_mutual_information2_implicit_", (DL_FUNC) &_spartropy_mutual_information2_implicit_, 3},
    {"_spartropy_mutual_information10_implicit_", (DL_FUNC) &_spartropy_mutual_information10_implicit_, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_spartropy(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
